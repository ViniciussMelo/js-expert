Padrão Strategy:
- Sugere que você tenha várias formas de fazer uma mesma coisa e separar cada uma dessas formas em classes (estratégias);
- Calsses possuem a mesma assinatura;
- Open closed principle.

Padrão Observable:
- "Você não me chama, eu chamo você";
- Cria uma lista de observadores que precisam ser notificados quando determinada ação acontecer (via eventos);

Padrão Template Method:
- Garantir um fluxo de métodos definindo uma sequência a ser executada;
- Criação de uma superclasse (geralmente abstrata) que define o esqueleto da função como uma sequencia de passos.
Sendo esses passos implementados pelas classes filhas, garantindo a ordem e a sequência de execução.

Decorators:
- Adiciona comportamentos a funcionalidades existentes sem mexer no que já está funcionando;
- Adiciona uma camada de abstração e quando quiser usar ela, é só adicionar o decorator(@).

Adapter:
- Criar uma assinatura única;
- Mantem a compatibilidade entre diferentes funções que fazem a mesma coisa, porém com nomes diferentes;

Como escolher um padrão de projeto:
- Criar projetos isolados no github aplicando cada um dos padrões estudados;
- Fazer o mesmo projeto usando diferentes padrões de projeto (para ver se encaixa ou não);
- Refactoring.guru;
- Entender as categorias de padrão de projeto;
- Refatorar projetos existenes;